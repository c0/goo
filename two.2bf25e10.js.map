{"version":3,"sources":["two.js"],"names":["BLOB_COLOR","DECAY","VELOCITY","Ball","x","y","angle","Math","PI","random","vx","cos","vy","r","randBetween","low","high","GOOP_Y_OFFSET","GoopLine","thickness","droop","ly","ry","width","lp","rp","percentage","mp","max","t","ctx","beginPath","moveTo","arcTo","lineTo","fill","stroke","canvas","document","getElementById","getContext","window","innerWidth","height","innerHeight","origin","mouse","balls","count","randomCount","goopLines","GOOP_LINE_COUNT","floor","i","push","ballMakerSpeed","BALL_MAKER_EDGE","loop","clearRect","halfPercentage","forEach","goopLine","update","fillRect","length","b","fillStyle","br","arc","maybeRemoveBall","requestAnimationFrame","splice","onresize","addEventListener","e","clientX","clientY"],"mappings":"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","file":"two.2bf25e10.js","sourceRoot":"../src","sourcesContent":["const BLOB_COLOR = '#000'\nconst DECAY = 0.005\nconst VELOCITY = 1 // >= 1\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n    this.angle = Math.PI * 2 * Math.random()\n    this.vx = (VELOCITY + Math.random() * (1 - VELOCITY)) * Math.cos(this.angle)\n    this.vy = VELOCITY + Math.random() * (1 - VELOCITY)\n    this.r = 12 + 3 * Math.random()\n  }\n\n  update() {\n    this.x += this.vx\n    this.y += this.vy\n    this.r -= DECAY\n  }\n}\n\nconst randBetween = (low, high) => {\n  return Math.random() * (high - low) + low\n}\n\nconst GOOP_Y_OFFSET = 50\n\nclass GoopLine {\n  constructor(y, thickness, droop) {\n    this.ly = y + GOOP_Y_OFFSET * Math.random() - GOOP_Y_OFFSET\n    this.ry = y + GOOP_Y_OFFSET * Math.random() - GOOP_Y_OFFSET\n\n    this.thickness = thickness\n    this.droop = droop\n    this.r = width\n  }\n\n  update(lp, rp, percentage) {\n    const mp = {\n      x: (lp.x + rp.x) / 2,\n      y: Math.max(\n        (this.ly + this.ry) / 2,\n        (this.ly + this.ry) / 2 + (1 - percentage) * this.droop - GOOP_Y_OFFSET\n      ),\n    }\n    const t = this.thickness\n    ctx.beginPath()\n    ctx.moveTo(lp.x, this.ly)\n    ctx.arcTo(mp.x, mp.y, rp.x, this.ry, this.r * (1 - percentage))\n    ctx.lineTo(rp.x, this.ry) // Finishes the line\n    ctx.lineTo(rp.x, this.ry + t)\n\n    ctx.arcTo(\n      mp.x,\n      mp.y + t,\n      lp.x,\n      this.ly + t,\n      this.r * 1.25 * (1 - percentage)\n    )\n\n    ctx.lineTo(lp.x, this.ly + t)\n    ctx.fill()\n    ctx.stroke()\n  }\n}\n\nconst canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\n\n// State\nlet width = (canvas.width = window.innerWidth)\nlet height = (canvas.height = window.innerHeight)\nlet origin = { x: width / 2, y: height / 2 }\nlet mouse = { x: width / 2, y: height / 2 }\nlet balls = []\nlet count = 0\nlet randomCount = 1\n\nlet goopLines = []\nconst GOOP_LINE_COUNT = Math.floor(height / 150)\n\nfor (let i = 0; i < GOOP_LINE_COUNT; i++) {\n  goopLines.push(\n    new GoopLine(\n      i * (height / GOOP_LINE_COUNT) + (50 * Math.random() - 50),\n      randBetween(30, 50),\n      randBetween(100, 300)\n    )\n  )\n}\nlet ballMakerSpeed = 10\nconst BALL_MAKER_EDGE = 50\n\nfunction loop() {\n  ctx.clearRect(0, 0, width, height)\n\n  const halfPercentage = (1 - mouse.y / height) / 2\n\n  goopLines.forEach((goopLine) => {\n    goopLine.update(\n      { x: width * halfPercentage },\n      { x: width * (1 - halfPercentage) },\n      halfPercentage * 2\n    )\n  })\n\n  // Side Walls\n  ctx.fillRect(0, 0, width * halfPercentage + 30, height)\n  ctx.fillRect(\n    width * (1 - halfPercentage) - 30,\n    0,\n    width * halfPercentage + 30,\n    height\n  )\n\n  // Create a new ball\n  if (count === randomCount) {\n    balls.push(new Ball(origin.x, origin.y))\n    count = 0\n    randomCount = 3 + Math.floor(Math.random() * 5)\n  }\n  count++\n\n  // Draw each ball\n  for (var i = 0; i < balls.length; i++) {\n    var b = balls[i]\n    ctx.fillStyle = BLOB_COLOR\n    ctx.beginPath()\n    var br = b.r >= 0 ? b.r : 0\n    ctx.arc(b.x, b.y, br, 0, Math.PI * 2, false)\n    ctx.fill()\n    b.update()\n  }\n\n  // Move the ball maker back and forth\n  origin.y = -10\n  origin.x += ballMakerSpeed\n\n  if (origin.x > width - BALL_MAKER_EDGE) {\n    origin.x = width - BALL_MAKER_EDGE\n    ballMakerSpeed *= -1\n  } else if (origin.x < BALL_MAKER_EDGE) {\n    origin.x = BALL_MAKER_EDGE\n    ballMakerSpeed *= -1\n  }\n\n  maybeRemoveBall()\n  requestAnimationFrame(loop)\n}\n\nfunction maybeRemoveBall() {\n  for (var i = 0; i < balls.length; i++) {\n    var b = balls[i]\n    if (\n      b.x + b.r < 0 ||\n      b.x - b.r > width ||\n      b.y + b.r < 0 ||\n      b.y - b.r > height ||\n      b.r <= 0\n    ) {\n      balls.splice(i, 1)\n    }\n  }\n}\n\nloop()\n\nwindow.onresize = () => {\n  width = canvas.width = window.innerWidth\n  height = canvas.height = window.innerHeight\n  origin = { x: width / 2, y: height / 2 }\n}\n\nwindow.addEventListener(\n  'mousemove',\n  function (e) {\n    mouse.x = e.clientX\n    mouse.y = e.clientY\n  },\n  false\n)\n"]}