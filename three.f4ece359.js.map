{"version":3,"sources":["three.js"],"names":["BLOB_COLOR","DECAY","VELOCITY","Ball","x","y","angle","Math","PI","random","vx","cos","vy","r","randBetween","low","high","GOOP_X_OFFSET","GoopLine","thickness","lx","rx","width","lp","rp","percentage","t","ctx","beginPath","moveTo","lineTo","fill","canvas","document","getElementById","getContext","window","innerWidth","height","innerHeight","origin","mouse","balls","count","randomCount","goopLines","GOOP_LINE_COUNT","floor","i","push","ballMakerSpeed","BALL_MAKER_EDGE","loop","clearRect","halfPercentage","forEach","goopLine","update","fillRect","length","b","fillStyle","br","arc","maybeRemoveBall","requestAnimationFrame","splice","onresize","addEventListener","e","clientX","clientY"],"mappings":"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","file":"three.f4ece359.js","sourceRoot":"../src","sourcesContent":["const BLOB_COLOR = '#000'\nconst DECAY = 0.005\nconst VELOCITY = 1 // >= 1\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x\n    this.y = y\n    this.angle = Math.PI * 2 * Math.random()\n    this.vx =\n      (VELOCITY / 4 + Math.random() * (1 - VELOCITY)) * Math.cos(this.angle)\n    this.vy = VELOCITY + Math.random() * (1 - VELOCITY)\n    this.r = 16 + 5 * Math.random()\n  }\n\n  update() {\n    this.x += this.vx\n    this.y += this.vy\n    this.r -= DECAY\n  }\n}\n\nconst randBetween = (low, high) => {\n  return Math.random() * (high - low) + low\n}\n\nconst GOOP_X_OFFSET = 50\n\nclass GoopLine {\n  constructor(x, thickness) {\n    this.lx = x + GOOP_X_OFFSET * Math.random() - GOOP_X_OFFSET\n    this.rx = x + GOOP_X_OFFSET * Math.random() - GOOP_X_OFFSET\n\n    this.thickness = thickness\n    this.r = width\n  }\n\n  update(lp, rp, percentage) {\n    const t = this.thickness\n    ctx.beginPath()\n    ctx.moveTo(this.lx, lp.y)\n    ctx.lineTo(this.rx, rp.y) // Finishes the line\n    ctx.lineTo(this.rx + t, rp.y)\n    ctx.lineTo(this.lx + t, lp.y)\n    ctx.fill()\n  }\n}\n\nconst canvas = document.getElementById('canvas')\nconst ctx = canvas.getContext('2d')\n\n// State\nlet width = (canvas.width = window.innerWidth)\nlet height = (canvas.height = window.innerHeight)\nlet origin = { x: width / 2, y: height / 2 }\nlet mouse = { x: width / 2, y: height / 2 }\nlet balls = []\nlet count = 0\nlet randomCount = 1\n\nlet goopLines = []\nconst GOOP_LINE_COUNT = Math.floor(width / 100)\n\nfor (let i = 0; i < GOOP_LINE_COUNT; i++) {\n  goopLines.push(\n    new GoopLine(\n      i * (width / GOOP_LINE_COUNT) + (50 * Math.random() - 50),\n      randBetween(5, 50)\n    )\n  )\n}\nlet ballMakerSpeed = 50\nconst BALL_MAKER_EDGE = 50\n\nfunction loop() {\n  ctx.clearRect(0, 0, width, height)\n\n  const halfPercentage = (1 - mouse.y / height) / 2\n\n  goopLines.forEach((goopLine) => {\n    goopLine.update(\n      { y: height * halfPercentage },\n      { y: height * (1 - halfPercentage) },\n      halfPercentage * 2\n    )\n  })\n\n  // Side Walls\n  ctx.fillRect(0, 0, width, height * halfPercentage + 30)\n  ctx.fillRect(\n    0,\n    height * (1 - halfPercentage) - 30,\n    width,\n    height * halfPercentage + 30\n  )\n\n  // Create a new ball\n  if (count === randomCount) {\n    balls.push(new Ball(origin.x, origin.y))\n    count = 0\n    randomCount = 3 + Math.floor(Math.random() * 5)\n  }\n  count++\n\n  // Draw each ball\n  for (var i = 0; i < balls.length; i++) {\n    var b = balls[i]\n    ctx.fillStyle = BLOB_COLOR\n    ctx.beginPath()\n    var br = b.r >= 0 ? b.r : 0\n    ctx.arc(b.x, b.y, br, 0, Math.PI * 2, false)\n    ctx.fill()\n    b.update()\n  }\n\n  // Move the ball maker back and forth\n  origin.y = -10\n  origin.x += ballMakerSpeed\n\n  if (origin.x > width - BALL_MAKER_EDGE) {\n    origin.x = width - BALL_MAKER_EDGE\n    ballMakerSpeed *= -1\n  } else if (origin.x < BALL_MAKER_EDGE) {\n    origin.x = BALL_MAKER_EDGE\n    ballMakerSpeed *= -1\n  }\n\n  maybeRemoveBall()\n  requestAnimationFrame(loop)\n}\n\nfunction maybeRemoveBall() {\n  for (var i = 0; i < balls.length; i++) {\n    var b = balls[i]\n    if (\n      b.x + b.r < 0 ||\n      b.x - b.r > width ||\n      b.y + b.r < 0 ||\n      b.y - b.r > height ||\n      b.r <= 0\n    ) {\n      balls.splice(i, 1)\n    }\n  }\n}\n\nloop()\n\nwindow.onresize = () => {\n  width = canvas.width = window.innerWidth\n  height = canvas.height = window.innerHeight\n  origin = { x: width / 2, y: height / 2 }\n}\n\nwindow.addEventListener(\n  'mousemove',\n  function (e) {\n    mouse.x = e.clientX\n    mouse.y = e.clientY\n  },\n  false\n)\n"]}